{"version":3,"sources":["webpack:///./src/components/Project/projectThumbnail.js","webpack:///./src/components/Project/projectGrid.js","webpack:///./src/pages/index.js"],"names":["Thumbnail","styled","article","props","theme","colorBorderLighter","ProjectImage","div","mediumUp","ProjectMeta","rem","colorBorderLight","ProjectTitle","h1","ffPrimary","smallUp","ProjectType","h2","ffSecondary","ProjectThumbnail","state","project","frames","imageWidth","currentFrame","imageOffset","_mouseEnter","bind","_mouseLeave","_randomizeImage","img","Image","src","this","frontmatter","thumbnail","publicURL","onload","imageHeight","height","width","frameCount","Math","floor","startFrame","random","setState","_cycleImage","_updateBackground","interval","setInterval","clearInterval","componentDidMount","componentWillUnmount","render","onMouseEnter","onMouseLeave","onTouchStart","onTouchEnd","to","path","style","transform","alt","title","type","React","Component","Projects","section","xxlargeUp","ProjectGrid","loadState","className","children","IndexPage","Posts","data","allMarkdownRemark","edges","map","edge","key","node","id"],"mappings":"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","file":"component---src-pages-index-js-bd2cc2eab3077023ee70.js","sourcesContent":["import React from 'react'\nimport Link from 'gatsby-link'\nimport styled from 'styled-components'\nimport { rem } from 'polished'\n\nconst Thumbnail = styled.article`\n  overflow: hidden;\n\n  a {\n    width: 100%;\n  }\n\n  &:hover div {\n    background: ${props => props.theme.colorBorderLighter};\n  }\n`\n\nconst ProjectImage = styled.div`\n  width: 100%;\n  height: calc(100% - 70px);\n  overflow: hidden;\n  position: relative;\n\n  @media ${props => props.theme.mediumUp} {\n    height: calc(100% - 100px);\n  }\n\n  img {\n    position: absolute;\n    top: 0;\n    left: 0;\n    height: 100%;\n    width: auto;\n  }\n`\n\nconst ProjectMeta = styled.div`\n  margin: 0;\n  display: flex;\n  padding: ${rem(26)} ${rem(20)};\n  padding-left: ${rem(20)};\n  padding-right: ${rem(20)};\n\n  @media ${props => props.theme.mediumUp} {\n    padding: ${rem(36)} ${rem(30)};\n    padding-left: ${rem(30)};\n    padding-right: ${rem(30)};\n    border-right: 1px solid ${props => props.theme.colorBorderLight};\n  }\n`\n\nconst ProjectTitle = styled.h1`\n  font-family: ${props => props.theme.ffPrimary};\n  font-size: ${rem(20)};\n  line-height: 1;\n  font-weight: 500;\n  margin: 0;\n  width: 50%;\n\n  @media ${props => props.theme.smallUp} {\n    font-size: ${rem(28)};\n  }\n\n  @media ${props => props.theme.mediumUp} {\n    font-size: ${rem(32)};\n  }\n`\n\nconst ProjectType = styled.h2`\n  font-family: ${props => props.theme.ffSecondary};\n  font-size: ${rem(12)};\n  line-height: ${rem(20)};\n  font-weight: 300;\n  margin: 0;\n  width: 50%;\n  text-align: right;\n\n  @media ${props => props.theme.smallUp} {\n    font-size: ${rem(14)};\n    line-height: ${rem(28)};\n  }\n\n  @media ${props => props.theme.mediumUp} {\n    line-height: ${rem(32)};\n  }\n`\n\nclass ProjectThumbnail extends React.Component {\n  constructor(props) {\n    super()\n\n    this.state = {\n      project: props.project,\n      frames: 1,\n      imageWidth: 0,\n      currentFrame: 0,\n      imageOffset: 0,\n    }\n\n    this._mouseEnter = this._mouseEnter.bind(this)\n    this._mouseLeave = this._mouseLeave.bind(this)\n  }\n\n  _randomizeImage() {\n    let img = new Image()\n    img.src = this.state.project.frontmatter.thumbnail.publicURL\n    img.onload = () => {\n      let imageHeight = img.height\n      let imageWidth = img.width\n\n      const frameCount = Math.floor(imageWidth / imageHeight)\n      const startFrame = Math.floor(Math.random() * frameCount)\n\n      this.setState({\n        frames: frameCount,\n        imageWidth: imageWidth,\n        currentFrame: startFrame,\n      })\n    }\n  }\n\n  _cycleImage() {\n    let currentFrame = this.state.currentFrame\n\n    if (currentFrame < this.state.frames - 1) {\n      currentFrame++\n    } else {\n      currentFrame = 0\n    }\n\n    this._updateBackground(currentFrame)\n  }\n\n  _updateBackground(currentFrame) {\n    this.setState({\n      currentFrame: currentFrame,\n    })\n  }\n\n  _mouseEnter() {\n    this._cycleImage()\n\n    this.interval = setInterval(() => {\n      this._cycleImage()\n    }, 600)\n  }\n\n  _mouseLeave() {\n    clearInterval(this.interval)\n  }\n\n  componentDidMount() {\n    this._randomizeImage()\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval)\n  }\n\n  render() {\n    return (\n      <Thumbnail\n        onMouseEnter={this._mouseEnter}\n        onMouseLeave={this._mouseLeave}\n        onTouchStart={this._mouseEnter}\n        onTouchEnd={this._mouseLeave}\n      >\n        <Link to={this.state.project.frontmatter.path}>\n          <ProjectImage>\n            <img\n              style={{\n                transform: `translateX(-${this.state.currentFrame *\n                  (100 / this.state.frames)}%)`,\n              }}\n              src={this.state.project.frontmatter.thumbnail.publicURL}\n              alt=\"{this.state.project.frontmatter.title}\"\n            />\n          </ProjectImage>\n          <ProjectMeta>\n            <ProjectTitle>{this.state.project.frontmatter.title}</ProjectTitle>\n            <ProjectType>{this.state.project.frontmatter.type}</ProjectType>\n          </ProjectMeta>\n        </Link>\n      </Thumbnail>\n    )\n  }\n}\n\nexport default ProjectThumbnail\n","import React from 'react'\nimport styled from \"styled-components\"\nimport { rem } from \"polished\"\n\nconst Projects = styled.section`\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-auto-rows: calc(100vw + 80px);\n  transition: all 0.2s ease-out;\n\n  &.loading {\n    opacity: 0;\n    transform: translateY(-${rem(20)});\n  }\n\n  &.loaded {\n    opacity: 1;\n    transform: none;\n  }\n\n  @media ${props => props.theme.mediumUp} {\n    grid-template-columns: 1fr 1fr;\n    grid-auto-rows: calc(50vw + 100px);\n  }\n\n  @media ${props => props.theme.xxlargeUp} {\n    grid-template-columns: 1fr 1fr 1fr;\n    grid-auto-rows: calc(100vw / 3 + 100px);\n  }\n\n  /* @media ${props => props.theme.xxxlargeUp} {\n    grid-template-columns: 1fr 1fr 1fr 1fr;\n    grid-auto-rows: calc(25vw + 100px);\n  } */\n`\nclass ProjectGrid extends React.Component {\n  constructor(props) {\n    super()\n\n    this.state = {loadState: \"loading\"}\n  }\n\n  componentDidMount() {\n    this.setState({loadState: \"loaded\"})\n  }\n\n  componentWillUnmount() {\n    this.setState({loadState: \"loading\"})\n  }\n\n  render() {\n    return (\n      <Projects className={this.state.loadState}>\n          {this.props.children}\n      </Projects>\n    )\n  }\n}\n\nexport default ProjectGrid\n","import React from 'react'\nimport { graphql } from 'gatsby'\n\nimport ProjectGrid from '../components/Project/projectGrid'\nimport ProjectThumbnail from '../components/Project/projectThumbnail'\n\nconst IndexPage = ({ data: { allMarkdownRemark: { edges } } }) => {\n  const Posts = edges\n    .map(edge => <ProjectThumbnail key={edge.node.id} project={edge.node} />);\n\n  return(\n    <ProjectGrid>\n      {Posts}\n    </ProjectGrid>\n  )\n}\n\nexport default IndexPage\n\nexport const pageQuery = graphql`\n  query IndexQuery {\n    allMarkdownRemark(sort: { order: ASC, fields: [frontmatter___order] }) {\n      edges {\n        node {\n          id\n          frontmatter {\n            path\n            title\n            type\n            thumbnail {\n              publicURL\n            }\n          }\n        }\n      }\n    }\n  }\n`;"],"sourceRoot":""}